#!/usr/bin/env python
'''Simple command-line script to process tasks one after another, polling
when there are no tasks available to process'''
import os
import sys
import time
import argparse

import yaml

import ming
from giza import schema as S

from monq import TaskObject

schema = S.SchemaItem.make(
    dict(
        ming={str:S.FormEncode(ming.config.DatastoreSchema())},
        poll_interval=int,
        ew=dict(
            compress=bool,
            use_jsmin=bool,
            use_cssmin=bool,
            script_name=S.String(if_missing='/_ew_resources/'),
            url_base=S.String(if_missing='/_ew_resources/'),
            extra_headers=str),
        gzip=bool))

def main(config):
    process_name = '%s pid %s' % (os.uname()[1], os.getpid())
    ming.config.configure_from_nested_dict(config['ming'])
    poll_interval = config.get('monq.poll_interval', 2)
    while True:
        t = TaskObject.get(
            process_name,
            waitfunc=lambda: time.sleep(poll_interval))
        t()

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Process MonQ Tasks')
    parser.add_argument(
        'config',
        help='A yaml config file',
        default='monq.yml')
    parser.add_argument(
        '-k', '--key',
        help='Key in the config file containing MonQ config',
        default=None)
    args = parser.parse_args()
    with open(args.config, 'rb') as fp:
        config = yaml.load(fp.read())
    if args.key:
        config = config[args.key]
    config = schema.validate(config)
    main(config)
    
